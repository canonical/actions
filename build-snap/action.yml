name: Build and publish Snap
description: |
  This action uses LXD to build the snap and optionally publish into `inputs.publish-channel`.

inputs:
  publish:
    description: |
      Whether to publish the snap on the store.
  snapcraft-token:
    description: |
      The token obtained with `snapcraft export-login --acls package_access,package_push,package_release -`. Required to publish.
  publish-channel:
    description: |
      Comma-separated list of snap channels to publish to. Required to publish.
  setup-lxd:
    description: |
      Set this to `false` if LXD is already set up.
    default: true
  lxd-channel:
    description:
      The channel to install LXD from. If empty, the installed one will be used (or the default channel installed).
  snapcraft-channel:
    description: |
      The channel to install Snapcraft from. Defaults to `stable`.
    default: stable
  tools-channel:
    description: |
      The channel to install review-tools from. Defaults to `stable`.
    default: stable
  review:
    description: |
      Run `review-tools.snap-review` on the built snap (default `true`).
    default: true
  review-opts:
    description: |
      Additional review options passed to `review-tools.snap-review`.
  plugs-file:
    description: |
      The JSON `plugs` declaration file for review tools. Defaults to `snap/local/plugs.json`.
    default: snap/local/plugs.json
  slots-file:
    description: |
      The JSON `slots` declaration file for review tools. Defaults to `snap/local/slots.json`.
    default: snap/local/slots.json

outputs:
  snap-path:
    value: ${{ steps.build-snap.outputs.snap-path }}
    description: |
      Full path to the built snap.
  snap-name:
    value: ${{ steps.build-snap.outputs.snap-name }}
    description: |
      Filename of the built snap.

runs:
  using: composite
  steps:
  - shell: bash
    run: |
      if [ '${{ inputs.publish }}' == 'true' ]; then
        [ -n '${{ inputs.snapcraft-token }}' ] || ( echo '::error::`inputs.snapcraft-token` unset' && exit 1 )
        [ -n '${{ inputs.publish-channel }}' ] || ( echo '::error::`inputs.publish-channel` unset' && exit 1 )
      fi

  - shell: bash
    run: |
      sudo snap install snapcraft --classic --channel ${{ inputs.snapcraft-channel }}
      sudo snap install review-tools --channel ${{ inputs.tools-channel }}

  - name: Set up LXD
    if: inputs.setup-lxd == 'true'
    uses: canonical/setup-lxd@v0.1.1
    with:
      channel: ${{ inputs.lxd-channel }}

  - name: Build the snap
    id: build-snap
    env:
      SNAPCRAFT_BUILD_INFO: 1
    shell: bash
    run: |
      /snap/bin/snapcraft --use-lxd | tee ${{ runner.temp }}/snap.log
      SNAP_NAME="$( tail -n1 ${{ runner.temp }}/snap.log | awk '/Snapped/ { print $2 }' )"
      echo "snap-path=$( readlink -f ${SNAP_NAME} )" >> $GITHUB_OUTPUT
      echo "snap-name=${SNAP_NAME}" >> $GITHUB_OUTPUT

  - name: Dump the Snapcraft log
    if: failure()
    shell: bash
    run: |
      cat ${HOME}/.local/state/snapcraft/log/snapcraft-*.log || true

  - name: Verify the built snap
    if: inputs.review == 'true'
    env:
      SNAP_ENFORCE_RESQUASHFS: 0
    shell: bash
    run: |
      REVIEW_OPTS=()
      [ -f '${{ inputs.plugs-file }}' ] && REVIEW_OPTS+=(--plugs '${{ inputs.plugs-file }}')
      [ -f '${{ inputs.slots-file }}' ] && REVIEW_OPTS+=(--slots '${{ inputs.slots-file }}')
      /snap/bin/review-tools.snap-review "${REVIEW_OPTS[@]}" ${{ inputs.review-opts }} *.snap

  - name: Publish the built snap, if requested
    shell: bash
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.snapcraft-token }}
    run: |
      [ '${{ inputs.publish }}' == 'true' ] || exit 0
      snapcraft upload *.snap --release '${{ inputs.publish-channel }}'
