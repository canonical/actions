name: Build and publish Snap
description: |
  This action uses LXD to build the snap and optionally publish into `inputs.publish-channel`.

inputs:
  publish:
    description: |
      Whether to publish the snap on the store.
  snapcraft-token:
    description: |
      The token obtained with `snapcraft export-login --acls package_access,package_push,package_release -`. Required to publish.
  launchpad-credentials:
    description: |
      Needed to build on Launchpad, for a foreign architecture.

      Use a GitHub Actions secret with the contents of `lp_credentials` after:
      ```
      #/usr/bin/env python3

      from launchpadlib.launchpad import Launchpad
      from launchpadlib.credentials import UnencryptedFileCredentialStore
      Launchpad.login_with("build-snap", "production", version="devel", credential_store=UnencryptedFileCredentialStore("lp_credentials"))
      ```
  launchpad-accept-public-upload:
    description: |
      When Launchpad is used for `snapcraft remote-build`, the code will be uploaded publicly. Set this to `true` to accept that.
    default: false
  publish-channel:
    description: |
      Comma-separated list of snap channels to publish to. Required to publish.
  setup-lxd:
    description: |
      Set this to `false` if LXD is already set up.
    default: true
  lxd-channel:
    description:
      The channel to install LXD from. If empty, the installed one will be used (or the default channel installed).
  snapcraft-channel:
    description: |
      The channel to install Snapcraft from. Defaults to `stable`.
    default: stable
  tools-channel:
    description: |
      The channel to install review-tools from. Defaults to `stable`.
    default: stable
  architecture:
    description: |
      The architecture to build for. Will use `snapcraft remote-build` for foreign architectures.

      See [Snapcraft Remote build documentation](https://snapcraft.io/docs/remote-build) for more information.
    default: amd64
  review:
    description: |
      Run `review-tools.snap-review` on the built snap (default `true`).
    default: true
  review-opts:
    description: |
      Additional review options passed to `review-tools.snap-review`.
  plugs-file:
    description: |
      The JSON `plugs` declaration file for review tools. Defaults to `snap/local/plugs.json`.
    default: snap/local/plugs.json
  slots-file:
    description: |
      The JSON `slots` declaration file for review tools. Defaults to `snap/local/slots.json`.
    default: snap/local/slots.json

outputs:
  snap-path:
    value: ${{ steps.build-snap.outputs.snap-path }}
    description: |
      Full path to the built snap.
  snap-name:
    value: ${{ steps.build-snap.outputs.snap-name }}
    description: |
      Filename of the built snap.

runs:
  using: composite

  steps:
  - id: setup-snapcraft
    shell: bash
    env:
      ARCHES: '{"X86": "i386", "X64": "amd64", "ARM": "armhf", "ARM64": "arm64"}'
    run: |
      sudo snap install snapcraft --classic --channel ${{ inputs.snapcraft-channel }}
      sudo snap install review-tools --channel ${{ inputs.tools-channel }}

      echo "compatible-arch=${{ fromJSON(env.ARCHES)[runner.arch] == inputs.architecture }}" >> $GITHUB_OUTPUT

  - shell: bash
    run: |
      if [ '${{ inputs.publish }}' == 'true' ]; then
        [ -n '${{ inputs.snapcraft-token }}' ] || ( echo '[error] `inputs.snapcraft-token` unset' && exit 1 )
        [ -n '${{ inputs.publish-channel }}' ] || ( echo '[error] `inputs.publish-channel` unset' && exit 1 )
      fi
      if ! ${{ steps.setup-snapcraft.outputs.compatible-arch }}; then
        [ -n '${{ inputs.launchpad-credentials }}' ] || ( echo '[error] `inputs.launchpad-credentials` required for foreign architecture builds' && exit 1 )
        [ -n '${{ inputs.launchpad-accept-public-upload }}' ] || ( echo '[error] `inputs.launchpad-accept-public-upload` required `true` for foreign architecture builds' && exit 1 )
      fi

  - name: Set up LXD
    if: inputs.setup-lxd == 'true' && steps.setup-snapcraft.outputs.compatible-arch
    uses: canonical/setup-lxd@v0.1.3
    with:
      channel: ${{ inputs.lxd-channel }}

  - name: Build the snap
    id: build-snap
    env:
      SNAPCRAFT_BUILD_INFO: 1
      GIT_COMMITTER_NAME: "Snapcraft remote build"
      GIT_COMMITTER_EMAIL: "null@snapcraft.io"
    shell: bash
    run: |
      if ${{ steps.setup-snapcraft.outputs.compatible-arch }}; then
        /snap/bin/snapcraft --use-lxd
      else
        mkdir -p $HOME/.local/share/snapcraft/provider/launchpad
        echo "${{ inputs.launchpad-credentials }}" >> $HOME/.local/share/snapcraft/provider/launchpad/credentials
        echo "${{ inputs.launchpad-credentials }}" >> $HOME/.local/share/snapcraft/launchpad-credentials
        yq --inplace 'del(.architectures)' snap/snapcraft.yaml
        yq --inplace 'del(.platforms)' snap/snapcraft.yaml
        /snap/bin/snapcraft remote-build --launchpad-accept-public-upload --build-for ${{ inputs.architecture }}
      fi
      [ -f *.snap ] || ( echo "error: failed to locate the built snap"; exit 1 )
      SNAP_PATH="$( readlink -f *.snap )"
      echo "snap-path=${SNAP_PATH}" >> $GITHUB_OUTPUT
      echo "snap-name=$( basename ${SNAP_PATH} )" >> $GITHUB_OUTPUT

  - name: Dump the Snapcraft logs
    if: ${{ !cancelled() }}
    shell: bash
    run: |
      cat ${HOME}/.local/state/snapcraft/log/*.log || true
      cat *_${{ inputs.architecture }}*.txt || true

  - name: Verify the built snap
    if: inputs.review == 'true'
    env:
      SNAP_ENFORCE_RESQUASHFS: 0
    shell: bash
    run: |
      REVIEW_OPTS=()
      [ -f '${{ inputs.plugs-file }}' ] && REVIEW_OPTS+=(--plugs '${{ inputs.plugs-file }}')
      [ -f '${{ inputs.slots-file }}' ] && REVIEW_OPTS+=(--slots '${{ inputs.slots-file }}')
      /snap/bin/review-tools.snap-review "${REVIEW_OPTS[@]}" ${{ inputs.review-opts }} ${{ steps.build-snap.outputs.snap-path }}

  - name: Publish the built snap, if requested
    shell: bash
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.snapcraft-token }}
    run: |
      [ '${{ inputs.publish }}' == 'true' ] || exit 0
      snapcraft upload ${{ steps.build-snap.outputs.snap-path }} --release '${{ inputs.publish-channel }}'
