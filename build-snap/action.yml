name: Build and publish Snap
description: |
  This action uses LXD to build the snap and optionally publish into `inputs.publish-channel`.

inputs:
  publish:
    description: |
      Whether to publish the snap on the store.
  snapcraft-token:
    description: |
      The token obtained with `snapcraft export-login --acls package_access,package_push,package_release -`. Required to publish.
  publish-channel:
    description: |
      The snap channel to publish to. Required to publish.
  snapcraft-channel:
    description: |
      The channel to install Snapcraft from. Defaults to `stable`.
    default: stable
  architecture:
    description: |
      The architecture to build for, see https://github.com/marketplace/actions/snapcraft-multiarch-build#multiple-architectures-support
    default: amd64
  tools-channel:
    description: |
      The channel to install review-tools from. Defaults to `stable`.
    default: stable
  review:
    description: |
      Run `review-tools.snap-review` on the built snap (default `true`).
    default: true
  review-opts:
    description: |
      Additional review options passed to `review-tools.snap-review`.
  plugs-file:
    description: |
      The JSON `plugs` declaration file for review tools. Defaults to `snap/local/plugs.json`.
    default: snap/local/plugs.json
  slots-file:
    description: |
      The JSON `slots` declaration file for review tools. Defaults to `snap/local/slots.json`.
    default: snap/local/slots.json

outputs:
  snap-path:
    value: ${{ steps.build-snap.outputs.snap }}
    description: |
      Full path to the built snap.
  snap-name:
    value: ${{ steps.snap-name.outputs.snap-name }}
    description: |
      The file name of the built snap.

runs:
  using: composite
  steps:
  - shell: bash
    run: |
      if [ '${{ inputs.publish }}' == 'true' ]; then
        [ -n '${{ inputs.snapcraft-token }}' ] || ( echo '::error::`inputs.snapcraft-token` unset' && exit 1 )
        [ -n '${{ inputs.publish-channel }}' ] || ( echo '::error::`inputs.publish-channel` unset' && exit 1 )
      fi

  - shell: bash
    run: |
      sudo snap install review-tools --channel ${{ inputs.tools-channel }}

  - uses: docker/setup-qemu-action@v2

  - name: Build the snap
    id: build-snap
    uses: diddlesnaps/snapcraft-multiarch-action@v1
    with:
      snapcraft-channel: ${{ inputs.snapcraft-channel }}
      architecture: ${{ inputs.architecture }}

  - name: Verify the built snap
    if: inputs.review == 'true'
    env:
      SNAP_ENFORCE_RESQUASHFS: 0
    shell: bash
    run: |
      REVIEW_OPTS=()
      [ -f '${{ inputs.plugs-file }}' ] && REVIEW_OPTS+=(--plugs '${{ inputs.plugs-file }}')
      [ -f '${{ inputs.slots-file }}' ] && REVIEW_OPTS+=(--slots '${{ inputs.slots-file }}')
      /snap/bin/review-tools.snap-review "${REVIEW_OPTS[@]}" ${{ inputs.review-opts }} ${{ steps.build-snap.outputs.snap }}

  - name: Determine the snap name
    id: snap-name
    shell: bash
    run: |
      echo "snap-name=$( basename ${{ steps.build-snap.outputs.snap }} )" >> ${GITHUB_OUTPUT}

  - name: Publish the built snap, if requested
    if: inputs.publish == 'true'
    uses: diddlesnaps/snapcraft-multiarch-action@v1
    with:
      store-auth: ${{ inputs.snapcraft-token }}
      snapcraft-channel: ${{ inputs.snapcraft-channel }}
      architecture: ${{ inputs.architecture }}
      snapcraft-args: push ${{ steps.snap-name.outputs.snap-name }} --release ${{ inputs.publish-channel }}
